;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(tmphist org-tags-history search-ring query-replace-history shell-command-history history read-expression-history regexp-history buffer-name-history file-name-history extended-command-history ido-buffer-history minibuffer-history command-history ido-file-history))
(setq org-tags-history '("setting" "function" "functions" "function" "funciton" "string" "function" "regexp" ":regexp:" ":regexp" "regex" "regexp" ":char_table:" ":Char_Table:" "CharTable" "char-table" "syntax" ":emacs:string:" ":emacs:editor:" "editor" "emacs editor" "test" "editor" "lisp" "editor" "lisp" "editor" "lisp" "home" "@home"))
(setq search-ring '("color" "tango" "require" "color-theme" "color" "tring" "re" "data" "string" "regex" "concat" "face" "org-agenda-file" "org-mode" "ver" "org-mode"))
(setq query-replace-history '("" "make-" "Constraints" "Contraints"))
(setq shell-command-history '("mv ~/test/geodesic.clj ~/test/ruby_quiz/" "mv"))
(setq read-expression-history '("(load-file \"~/test/tango.el\")" "(subr-arity (symbol-function 're-search-forward))" "(subr-arity (symbol-function 'message))" "(subr-arity 'message)" "(subr-arity 're-search-forward)" "(subr-arity #'re-search-forward)" "(subr-arity re-search-forward)" "(subr-artiy re-search-forward)" "(surb-artiy re-search-forward)" "(surb-artiy #'re-search-forward)" "(point)" "(match-beginning 0)" "(re-search-forward \"Searching\")" "(match-string 0)" "(match-string 1)" "(match-string)" "(re-search-forward \"(.*)\")" "(re-search-forward \"(.*?)\")" "(replace-match \"google\")" "(re-search-forward \"(store\")" "(re-search-forward \"\\\\\\\\(store\")" "(replace-match \"google\")" "(re-search-forward \"\\\\(store\\\\)\")" "(re-search-forward \"\\\\(\")" "(match-start 0)" "(match-end 0)" "(re-search-forward \"(.*?)\")" "(re-search-forward \"(\")" "(re-search-forward (regexp-quote \"[(]\"))" "(re-search-forward (regexp-quote \"\\\\(.*?\\\\)\") nil t 1)"))
(setq buffer-name-history '("*scratch*" "init.el" "*scratch*" "init.el" "tango.el|.emacs.d" "init.el" "tango.el|.emacs.d" "init.el" "tango.el|.emacs.d" "init.el" "*scratch*" "sequence.org" "*scratch*" "sequence.org" "*scratch*" "sequence.org" "function.org" "sequence.org" "function.org" "*scratch*" "function.org" "MORE.STUFF" "settings.org" "files.el.gz" "function.org" "finder.el.gz" "function.org" "*scratch*" "*Messages*" "string.org"))
(setq file-name-history '("/home/cachou/.emacs.d/init.el" "/home/cachou/.emacs.d/tango.el" "/home/cachou/.emacs.d/init.el" "/home/cachou/test/tango.el" "/home/cachou/test/elisp/settings.org" "/home/cachou/test/elisp/sequence.org" "/home/cachou/test/elisp/function.org" "/home/cachou/test/elisp/string.org" "/home/cachou/.emacs.d/init.el" "~/test/elisp/string.org" "/home/cachou/test/elisp/types.org" "/home/cachou/test/emacs.org" "/home/cachou/.emacs.d/init.el" "/home/cachou/test/emacs.org" "/home/cachou/test/org-mode-tag.org" "/home/cachou/test/emacs.org" "/home/cachou/.emacs.d/tagging.el" "/home/cachou/test/emacs" "/home/cachou/test/emacs-link" "/home/cachou/test/emacs" "/home/cachou/test/emacs.org" "~/test/emacs.org" "/home/cachou/test/emacs.org" "/home/cachou/test/clj-chardet/project.clj" "/home/cachou/test/clj-chardet/src/clj_chardet/core.clj" "/home/cachou/test/clj-chm2pdf/project.clj" "/home/cachou/test/clj-chardet/project.clj" "/home/cachou/.ssh/id_rsa.pub" "/home/cachou/test/clj-chardet/README" "/home/cachou/test/clj-chardet/project.clj"))
(setq extended-command-history '("package-list-packages" "comment-region" "speedbar" "senator-minor-mode" "cedet-version" "set-frame-font" "kill-some-buffers" "describe-buffer-case-table" "font-lock-mode" "emacs-lisp-mode" "org-mode" "comment-region" "org-agenda-exit" "package-list-packages" "org-agenda-filter-by-tag" "org-tags-view" "org-store-link" "color-theme-infodoc" "tagging-minor-mode" "color-theme-infodoc" "tagging-minor-mode" "decrease-left-margin" "tagging-mode" "kill-some-buffers" "customize-variable" "kill-some-buffers" "color-theme-infodoc" "goto-address" "emacs-lisp-mode" "font-lock-mode"))
(setq ido-buffer-history '("sc" "s" "sc" "seq" "sc" "f" "sc" "me" "s" "string" "s" "sc" "s" "sc" "s" "sc" "*scratch*" "gr" "group" "sim" "ed" "si" "ki" "si" "hello-world" "f" "sc" "50" "up" "*sc"))
(setq minibuffer-history '("cedet-version" "WenQuanYi Micro Hei Mono" "set-default-font" "auto-mode-alist" "load-path" "load" "rx" "regexp-opt" "regexp-quote" "ascii-case-table" "upcase" "concat" "assoc-string" "aref" "insert" "font-lock" "org-agenda-files" "org-version" "org-agenda-filter-by-tag-refine" "@home" "speedbar" "org-tags-match-list-sublevels" "Tag" "org-agenda-set-tags" "org-activate-tags" "org-set-tags" "Org Mode Home Page" "Number" "re-search-forward" "[a-b]\\*"))
(setq command-history '((package-list-packages) (switch-to-buffer "*scratch*") (switch-to-buffer "init.el") (switch-to-buffer "*scratch*") (find-file "/home/cachou/.emacs.d/init.el") (switch-to-buffer "init.el") (switch-to-buffer "tango.el|.emacs.d") (switch-to-buffer "init.el") (switch-to-buffer "tango.el|.emacs.d") (switch-to-buffer "init.el") (switch-to-buffer "tango.el|.emacs.d") (switch-to-buffer "init.el") (comment-region (region-beginning) (region-end) nil) (find-file "/home/cachou/.emacs.d/tango.el") (find-file "/home/cachou/.emacs.d/init.el") (eval-expression '(load-file "~/test/tango.el") nil) (find-file "/home/cachou/test/tango.el") (speedbar nil) (senator-minor-mode 1) (cedet-version) (describe-variable 'cedet-version) (switch-to-buffer "*scratch*") (switch-to-buffer "sequence.org") (find-file "/home/cachou/test/elisp/settings.org") (set-frame-font "WenQuanYi Micro Hei Mono" nil) (describe-function 'set-default-font) (switch-to-buffer "sequence.org") (switch-to-buffer "*scratch*") (switch-to-buffer "sequence.org") (switch-to-buffer "*scratch*") (switch-to-buffer "sequence.org")))
(setq ido-file-history '("." "ini" ".emac" "new" "de" "tang" "ini" ".ema" "tango.el" "s" "settings.org" "seq" "sequence.org" "function.org" "st" "eli" "test" "ini" ".emacs" "types.org" "eli" "tes" "org" "~/" "org" "test" "init" ".emacs" "org" "test"))
